<?xml version="1.0"?>
<doc>
    <assembly>
        <name>pbi-local-mcp</name>
    </assembly>
    <members>
        <member name="T:pbi_local_mcp.Configuration.CommandLineOptions">
            <summary>
            Configuration options for command-line arguments
            </summary>
        </member>
        <member name="P:pbi_local_mcp.Configuration.CommandLineOptions.Port">
            <summary>
            Gets or sets the PowerBI port number from command-line argument
            </summary>
        </member>
        <member name="M:pbi_local_mcp.Configuration.CommandLineOptions.IsValid">
            <summary>
            Validates the command-line options
            </summary>
            <returns>True if valid, false otherwise</returns>
        </member>
        <member name="T:pbi_local_mcp.Configuration.PowerBiConfig">
            <summary>
            Configuration settings for Power BI connection
            </summary>
        </member>
        <member name="P:pbi_local_mcp.Configuration.PowerBiConfig.Port">
            <summary>
            Gets or sets the port number for connecting to the Power BI instance
            </summary>
        </member>
        <member name="P:pbi_local_mcp.Configuration.PowerBiConfig.DbId">
            <summary>
            Gets or sets the database ID (catalog name) to connect to
            </summary>
        </member>
        <member name="M:pbi_local_mcp.Configuration.PowerBiConfig.Validate">
            <summary>
            Validates the configuration settings
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when required settings are missing</exception>
        </member>
        <member name="T:pbi_local_mcp.Core.DaxQueryExecutionException">
            <summary>
            Represents errors that occur during DAX or DMV query execution.
            This exception provides access to the original query and its type.
            </summary>
        </member>
        <member name="P:pbi_local_mcp.Core.DaxQueryExecutionException.Query">
            <summary>
            Gets the query text that caused the exception.
            </summary>
        </member>
        <member name="P:pbi_local_mcp.Core.DaxQueryExecutionException.QueryType">
            <summary>
            Gets the type of the query (DAX or DMV) that caused the exception.
            </summary>
        </member>
        <member name="M:pbi_local_mcp.Core.DaxQueryExecutionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:pbi_local_mcp.Core.DaxQueryExecutionException"/> class.
            </summary>
        </member>
        <member name="M:pbi_local_mcp.Core.DaxQueryExecutionException.#ctor(System.String,System.String,pbi_local_mcp.QueryType)">
            <summary>
            Initializes a new instance of the <see cref="T:pbi_local_mcp.Core.DaxQueryExecutionException"/> class
            with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="query">The query text that caused the exception.</param>
            <param name="queryType">The type of the query.</param>
        </member>
        <member name="M:pbi_local_mcp.Core.DaxQueryExecutionException.#ctor(System.String,System.Exception,System.String,pbi_local_mcp.QueryType)">
            <summary>
            Initializes a new instance of the <see cref="T:pbi_local_mcp.Core.DaxQueryExecutionException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
            <param name="query">The query text that caused the exception.</param>
            <param name="queryType">The type of the query.</param>
        </member>
        <member name="M:pbi_local_mcp.Core.DaxQueryExecutionException.#ctor(Microsoft.AnalysisServices.AdomdClient.AdomdException,System.String,pbi_local_mcp.QueryType)">
            <summary>
            Initializes a new instance of the <see cref="T:pbi_local_mcp.Core.DaxQueryExecutionException"/> class
            with a reference to the inner AdomdException that is the cause of this exception.
            The message from the inner AdomdException will be used.
            </summary>
            <param name="adomdInnerException">The AdomdException that is the cause of the current exception.</param>
            <param name="query">The query text that caused the exception.</param>
            <param name="queryType">The type of the query.</param>
        </member>
        <member name="M:pbi_local_mcp.Core.DaxQueryExecutionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:pbi_local_mcp.Core.DaxQueryExecutionException"/> class
            with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:pbi_local_mcp.Core.DaxQueryExecutionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:pbi_local_mcp.Core.DaxSecurityUtils">
            <summary>
            Security utilities for validating and escaping DAX identifiers and expressions
            </summary>
        </member>
        <member name="M:pbi_local_mcp.Core.DaxSecurityUtils.IsValidIdentifier(System.String)">
            <summary>
            Validates that an identifier is safe for use in DAX/DMV queries
            </summary>
            <param name="identifier">The identifier to validate</param>
            <returns>True if the identifier is valid and safe</returns>
        </member>
        <member name="M:pbi_local_mcp.Core.DaxSecurityUtils.EscapeDaxIdentifier(System.String)">
            <summary>
            Escapes a DAX identifier for safe use in queries
            </summary>
            <param name="identifier">The identifier to escape</param>
            <returns>The escaped identifier wrapped in quotes</returns>
            <exception cref="T:System.ArgumentException">Thrown if the identifier is invalid</exception>
        </member>
        <member name="T:pbi_local_mcp.Core.FilterExpressionValidator">
            <summary>
            Validates filter expressions for DMV queries
            </summary>
        </member>
        <member name="M:pbi_local_mcp.Core.FilterExpressionValidator.ValidateFilterExpression(System.String)">
            <summary>
            Validates a filter expression for safe use in DMV queries
            </summary>
            <param name="filterExpr">The filter expression to validate</param>
            <exception cref="T:System.ArgumentException">Thrown if the filter expression contains forbidden patterns</exception>
        </member>
        <member name="T:pbi_local_mcp.Core.IInstanceDiscovery">
            <summary>
            Interface for discovering Power BI Desktop instances and their Analysis Services ports
            </summary>
        </member>
        <member name="M:pbi_local_mcp.Core.IInstanceDiscovery.DiscoverInstances">
            <summary>
            Discovers all running Power BI Desktop instances
            </summary>
            <returns>A collection of discovered instances</returns>
        </member>
        <member name="T:pbi_local_mcp.Core.InstanceInfo">
            <summary>
            Contains information about a discovered Power BI Desktop instance
            </summary>
        </member>
        <member name="P:pbi_local_mcp.Core.InstanceInfo.WorkspacePath">
            <summary>
            Gets or sets the workspace path where the instance is running
            </summary>
        </member>
        <member name="P:pbi_local_mcp.Core.InstanceInfo.Port">
            <summary>
            Gets or sets the port number on which Analysis Services is listening
            </summary>
        </member>
        <member name="P:pbi_local_mcp.Core.InstanceInfo.Databases">
            <summary>
            Gets or sets the collection of databases in this instance
            </summary>
        </member>
        <member name="T:pbi_local_mcp.Core.DatabaseInfo">
            <summary>
            Contains information about a database within a Power BI Desktop instance
            </summary>
        </member>
        <member name="P:pbi_local_mcp.Core.DatabaseInfo.Id">
            <summary>
            Gets or sets the database ID (catalog name)
            </summary>
        </member>
        <member name="P:pbi_local_mcp.Core.DatabaseInfo.Name">
            <summary>
            Gets or sets the friendly name of the database
            </summary>
        </member>
        <member name="T:pbi_local_mcp.Core.IServer">
            <summary>
            Interface for server operations in the Power BI Model Context Protocol
            </summary>
        </member>
        <member name="M:pbi_local_mcp.Core.IServer.GetInstances">
            <summary>
            Gets the list of available model instances
            </summary>
            <returns>A collection of model instances</returns>
        </member>
        <member name="M:pbi_local_mcp.Core.IServer.ConnectToInstance(System.String)">
            <summary>
            Connects to a specific model instance
            </summary>
            <param name="instanceId">The ID of the instance to connect to</param>
            <returns>True if connection was successful, false otherwise</returns>
        </member>
        <member name="T:pbi_local_mcp.Core.ModelInstance">
            <summary>
            Represents a Power BI model instance
            </summary>
        </member>
        <member name="P:pbi_local_mcp.Core.ModelInstance.Id">
            <summary>
            Gets or sets the unique identifier for the instance
            </summary>
        </member>
        <member name="P:pbi_local_mcp.Core.ModelInstance.Name">
            <summary>
            Gets or sets the display name of the instance
            </summary>
        </member>
        <member name="P:pbi_local_mcp.Core.ModelInstance.Port">
            <summary>
            Gets or sets the connection port for the instance
            </summary>
        </member>
        <member name="T:pbi_local_mcp.Core.ITabularConnection">
            <summary>
            Interface for connecting to and executing queries against a tabular model
            </summary>
        </member>
        <member name="M:pbi_local_mcp.Core.ITabularConnection.ExecAsync(System.String,pbi_local_mcp.QueryType)">
            <summary>
            Executes a query (DAX or DMV) and returns the results.
            </summary>
            <param name="query">The query to execute.</param>
            <param name="queryType">The type of query (DAX or DMV).</param>
            <returns>A collection of query results as dictionaries.</returns>
        </member>
        <member name="M:pbi_local_mcp.Core.ITabularConnection.ExecAsync(System.String,pbi_local_mcp.QueryType,System.Threading.CancellationToken)">
            <summary>
            Executes a query (DAX or DMV) with cancellation support and returns the results.
            </summary>
            <param name="query">The query to execute.</param>
            <param name="queryType">The type of query (DAX or DMV).</param>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>A collection of query results as dictionaries.</returns>
        </member>
        <member name="M:pbi_local_mcp.Core.ITabularConnection.ExecInfoAsync(System.String,System.String)">
            <summary>
            Executes a DAX info function with filter and returns the results
            </summary>
            <param name="func">The name of the INFO function to execute</param>
            <param name="filterExpr">Filter expression to apply</param>
            <returns>A collection of query results as dictionaries</returns>
        </member>
        <member name="M:pbi_local_mcp.Core.ITabularConnection.ExecInfoAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Executes a DAX info function with filter and cancellation support and returns the results
            </summary>
            <param name="func">The name of the INFO function to execute</param>
            <param name="filterExpr">Filter expression to apply</param>
            <param name="cancellationToken">Token to monitor for cancellation requests</param>
            <returns>A collection of query results as dictionaries</returns>
        </member>
        <member name="T:pbi_local_mcp.DaxTools">
            <summary>
            DAX Tools exposed as MCP server tools.
            </summary>
        </member>
        <member name="M:pbi_local_mcp.DaxTools.#ctor(pbi_local_mcp.Core.ITabularConnection,Microsoft.Extensions.Logging.ILogger{pbi_local_mcp.DaxTools})">
            <summary>
            Initializes a new instance of the <see cref="T:pbi_local_mcp.DaxTools"/> class.
            </summary>
            <param name="tabularConnection">The tabular connection service.</param>
            <param name="logger">The logger service.</param>
        </member>
        <member name="M:pbi_local_mcp.DaxTools.RunQuery(System.String,System.Int32)">
            <summary>
            Execute a DAX query. Supports complete DAX queries with DEFINE blocks or simple expressions.
            </summary>
            <param name="dax">The DAX query to execute. Can be a complete query with DEFINE block, an EVALUATE statement, or a simple expression.</param>
            <param name="topN">Maximum number of rows to return for table expressions (default: 10). Ignored for complete queries.</param>
            <returns>Query execution result</returns>
            <exception cref="T:System.ArgumentException">Thrown when query validation fails</exception>
            <exception cref="T:System.Exception">Thrown when query execution fails</exception>
        </member>
        <member name="M:pbi_local_mcp.DaxTools.ValidateCompleteDAXQuery(System.String)">
            <summary>
            Validates the structure of a DAX query according to proper syntax rules.
            Throws ArgumentException if validation fails.
            </summary>
            <param name="query">The DAX query to validate.</param>
        </member>
        <member name="M:pbi_local_mcp.DaxTools.NormalizeDAXQuery(System.String)">
            <summary>
            Normalizes a DAX query by standardizing whitespace and line endings.
            </summary>
        </member>
        <member name="M:pbi_local_mcp.DaxTools.NormalizeWhitespacePreservingStrings(System.String)">
            <summary>
            Helper to normalize whitespace while preserving strings.
            Collapses multiple whitespace characters into a single space outside of strings.
            </summary>
        </member>
        <member name="M:pbi_local_mcp.DaxTools.CheckBalancedDelimiters(System.String,System.Char,System.Char,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Checks if delimiters like parentheses and brackets are properly balanced.
            Skips delimiters found within string literals.
            </summary>
        </member>
        <member name="M:pbi_local_mcp.DaxTools.CheckBalancedQuotes(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Checks if string delimiters (quotes) are properly balanced.
            DAX uses " for string literals and ' for table/column names (which can contain spaces).
            Escaped quotes ("" inside strings, '' inside identifiers though less common) are handled.
            </summary>
        </member>
        <member name="M:pbi_local_mcp.DaxTools.ConstructEvaluateStatement(System.String,System.Int32)">
            <summary>
            Constructs an EVALUATE statement based on the query and topN value.
            </summary>
            <param name="query">The core query expression.</param>
            <param name="topN">Maximum number of rows to return (default: 10).</param>
            <returns>The constructed EVALUATE statement.</returns>
        </member>
        <member name="T:pbi_local_mcp.Prompts.ComplexPromptType">
            <summary>
            Provides advanced parameterizable prompt templates for DAX analysis and PowerBI measure design tasks.
            Allows fine-tuning of analysis depth, focus areas, measure complexity, and specialized scenarios 
            through comprehensive parameters that leverage deep DAX and tabular model expertise.
            </summary>
        </member>
        <member name="M:pbi_local_mcp.Prompts.ComplexPromptType.AnalyzeDaxWithFocus(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Returns a highly customized prompt template for analyzing DAX queries with specific focus areas
            and analysis depth levels, incorporating comprehensive DAX best practices and optimization techniques.
            </summary>
            <param name="depth">The depth of analysis requested: 'basic', 'detailed', or 'comprehensive'</param>
            <param name="focus">The focus areas for analysis: 'performance', 'style', 'security', 'relationships', or 'both' (default)</param>
            <param name="modelType">The model type context: 'import', 'directquery', 'composite', or 'unknown' (default)</param>
            <param name="includeAlternatives">Whether to provide alternative implementation suggestions</param>
            <returns>A specialized prompt for DAX query analysis with specified parameters and expert guidance</returns>
        </member>
        <member name="M:pbi_local_mcp.Prompts.ComplexPromptType.DesignMeasureWithParams(System.String,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Returns a comprehensive prompt template for designing DAX measures with specified complexity
            and technical considerations focused on PowerBI model understanding and best practices.
            </summary>
            <param name="complexity">The desired measure complexity: 'simple', 'moderate', 'complex', or 'advanced'</param>
            <param name="calculationType">The calculation focus: 'aggregation', 'time_intelligence', 'ranking', 'statistical', or 'general'</param>
            <param name="timeIntelligence">Whether to include time intelligence patterns in the measure design</param>
            <param name="includeErrorHandling">Whether to include comprehensive error handling patterns</param>
            <param name="optimizeFor">Optimization priority: 'performance', 'readability', 'flexibility', or 'balanced'</param>
            <returns>A specialized prompt for DAX measure design with specified parameters and expert guidance</returns>
        </member>
        <member name="M:pbi_local_mcp.Prompts.ComplexPromptType.OptimizeDaxPerformance(System.String,System.String,System.String)">
            <summary>
            Returns a specialized prompt for DAX optimization with specific performance bottleneck analysis
            and advanced optimization techniques tailored to enterprise scenarios.
            </summary>
            <param name="bottleneckType">Type of performance issue: 'memory', 'cpu', 'query', 'refresh', or 'general'</param>
            <param name="modelSize">Model size category: 'small', 'medium', 'large', 'enterprise'</param>
            <param name="userConcurrency">Expected user concurrency: 'low', 'medium', 'high', 'enterprise'</param>
            <returns>A specialized prompt for advanced DAX performance optimization</returns>
        </member>
        <member name="M:pbi_local_mcp.Prompts.ComplexPromptType.DebugVisualContextAdvanced(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Returns a specialized prompt for debugging visual context issues with comprehensive visual calculation simulation,
            designed to help understand and replicate unexpected aggregation behaviors in Power BI visuals.
            </summary>
            <param name="visualType">The type of visual experiencing issues: 'matrix', 'table', 'chart', 'card', or 'unknown'</param>
            <param name="issueType">The specific aggregation issue: 'total_wrong', 'blank_values', 'context_transition', 'hierarchy_issue', or 'general'</param>
            <param name="analysisDepth">Analysis depth: 'quick', 'detailed', 'comprehensive'</param>
            <param name="includeSimulation">Whether to include visual calculation simulation examples</param>
            <returns>A specialized prompt for visual context debugging with visual calculation guidance</returns>
        </member>
        <member name="M:pbi_local_mcp.Prompts.ComplexPromptType.DebugDaxStepByStep(System.String,System.Boolean,System.String)">
            <summary>
            Interactive DAX debugging with step-by-step analysis and comprehensive recommendations.
            </summary>
            <param name="approach">Debugging approach: variable_inspection, context_analysis, execution_flow, error_tracing</param>
            <param name="includeVisualCalc">Include visual calculation simulation</param>
            <param name="depth">Analysis depth: quick, detailed, comprehensive</param>
            <returns>A specialized prompt for interactive DAX debugging with step-by-step guidance</returns>
        </member>
        <member name="M:pbi_local_mcp.Prompts.ComplexPromptType.AnalyzeDaxOptimization(System.String,System.Boolean,System.String)">
            <summary>
            Comprehensive DAX analysis with optimization recommendations and performance insights.
            </summary>
            <param name="focus">Analysis focus: performance, readability, maintainability, modern_patterns</param>
            <param name="includeAlternatives">Include alternative implementation suggestions</param>
            <param name="modelSize">Target model size: small, medium, large, enterprise</param>
            <returns>A specialized prompt for comprehensive DAX optimization analysis</returns>
        </member>
        <member name="M:pbi_local_mcp.Prompts.ComplexPromptType.AnalyzeTestScenarios(System.String,System.String,System.Boolean)">
            <summary>
            Analysis-based test scenario recommendations for DAX measures with comprehensive coverage strategies
            focused on technical validation and PowerBI model behavior.
            </summary>
            <param name="analysisType">Analysis type: coverage, edge_cases, performance_impact, validation</param>
            <param name="measureType">Measure type: aggregation, time_intelligence, ranking, statistical, general</param>
            <param name="includeTestPatterns">Include recommended test patterns</param>
            <returns>A specialized prompt for generating comprehensive test scenarios based on DAX analysis</returns>
        </member>
        <member name="T:pbi_local_mcp.Prompts.SimplePromptType">
            <summary>
            Provides a collection of predefined prompts for DAX analysis and PowerBI measure design tasks.
            These prompts leverage comprehensive DAX knowledge and tabular model best practices to provide
            expert-level guidance for DAX development, optimization, and debugging.
            </summary>
        </member>
        <member name="M:pbi_local_mcp.Prompts.SimplePromptType.AnalyzeDaxPrompt">
            <summary>
            Returns a comprehensive prompt template for analyzing DAX queries with focus on performance optimization,
            code readability, best practices, and tabular model integration patterns.
            </summary>
            <returns>A specialized prompt for thorough DAX query analysis and improvement recommendations.</returns>
        </member>
        <member name="M:pbi_local_mcp.Prompts.SimplePromptType.DesignMeasurePrompt">
            <summary>
            Returns a comprehensive prompt template for designing DAX measures with consideration for
            business requirements, performance, maintainability, and tabular model integration.
            </summary>
            <returns>A specialized prompt for expert-level DAX measure design assistance.</returns>
        </member>
        <member name="M:pbi_local_mcp.Prompts.SimplePromptType.AnalyzeRelationshipsPrompt">
            <summary>
            Returns a specialized prompt template for analyzing table relationships in a data model,
            examining cardinality, filter flow patterns, performance implications, and optimization opportunities.
            </summary>
            <returns>A specialized prompt for comprehensive data model relationship analysis.</returns>
        </member>
        <member name="M:pbi_local_mcp.Prompts.SimplePromptType.DebugDaxCalculationPrompt">
            <summary>
            Returns a specialized prompt for debugging DAX calculations, identifying common issues,
            and providing step-by-step troubleshooting guidance.
            </summary>
            <returns>A comprehensive prompt for DAX debugging and troubleshooting assistance.</returns>
        </member>
        <member name="M:pbi_local_mcp.Prompts.SimplePromptType.DebugVisualContextPrompt">
            <summary>
            Returns a specialized prompt for analyzing visual context issues and unexpected aggregation behaviors,
            with guidance on using visual calculations to simulate and debug the exact behavior.
            </summary>
            <returns>A comprehensive prompt for visual context debugging with visual calculation simulation.</returns>
        </member>
        <member name="T:pbi_local_mcp.InstanceDiscovery">
            <summary>
            Discovers running Power BI Desktop instances and their Analysis Services databases
            </summary>
        </member>
        <member name="M:pbi_local_mcp.InstanceDiscovery.#ctor(Microsoft.Extensions.Logging.ILogger{pbi_local_mcp.InstanceDiscovery})">
            <summary>
            Initializes a new instance of the InstanceDiscovery class.
            </summary>
            <param name="logger">The logger instance used for recording diagnostic information and errors</param>
            <remarks>
            The provided logger is used throughout the discovery process to log errors
            and important diagnostic information about Power BI instance discovery.
            </remarks>
        </member>
        <member name="M:pbi_local_mcp.InstanceDiscovery.RunPowerBiDesktop">
            <summary>
            Starts a new instance of Power BI Desktop using its default installation path.
            </summary>
            <remarks>
            This method attempts to launch PBIDesktop.exe from the standard installation directory.
            Any launch failures are logged to the console error stream but do not throw exceptions.
            </remarks>
        </member>
        <member name="M:pbi_local_mcp.InstanceDiscovery.RunInteractiveAsync">
            <summary>
            Enables interactive mode allowing users to select a Power BI instance and database.
            Updates the .env file with the selected instance's port and database ID.
            </summary>
            <remarks>
            This method:
            1. Discovers all running Power BI instances
            2. If no instances found, launches Power BI Desktop
            3. Lists available instances and their databases
            4. Prompts user to select an instance and database
            5. Writes connection settings to .env file
            </remarks>
            <returns>A task representing the asynchronous operation</returns>
        </member>
        <member name="M:pbi_local_mcp.InstanceDiscovery.SelectFromList(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Prompts the user to select an item from a list of options.
            </summary>
            <param name="prompt">The message to display above the list of options</param>
            <param name="items">The list of items to choose from</param>
            <returns>The zero-based index of the selected item</returns>
            <exception cref="T:System.ArgumentException">Thrown when the items list is empty</exception>
            <remarks>
            Displays numbered options and repeatedly prompts until a valid selection is made.
            If only one item exists, automatically returns its index without prompting.
            </remarks>
        </member>
        <member name="M:pbi_local_mcp.InstanceDiscovery.DiscoverInstances">
            <summary>
            Discovers running Power BI Desktop Analysis Services instances by querying WMI for msmdsrv.exe processes.
            For each instance found, extracts the workspace directory and port from command line parameters,
            then attempts to enumerate databases through ADOMD.NET connection.
            </summary>
            <returns>
            A collection of InstanceInfo objects containing details about found Power BI instances,
            including workspace paths, ports, and available databases.
            Returns an empty collection if no instances are found or if discovery fails.
            </returns>
            <exception cref="T:System.Management.ManagementException">Thrown when WMI query fails.</exception>
            <exception cref="T:Microsoft.AnalysisServices.AdomdClient.AdomdConnectionException">Thrown when unable to connect to Analysis Services instance.</exception>
        </member>
        <member name="M:pbi_local_mcp.InstanceDiscovery.ExtractWorkspaceDir(System.String)">
            <summary>
            Extracts the workspace directory from an msmdsrv.exe process command line.
            </summary>
            <param name="commandLine">The full command line of the msmdsrv.exe process</param>
            <returns>The workspace directory path if found; otherwise, an empty string</returns>
            <remarks>
            The workspace directory is specified with the -s parameter in the command line.
            Example format: -s "C:\Users\username\Documents\Power BI Desktop"
            </remarks>
        </member>
        <member name="M:pbi_local_mcp.InstanceDiscovery.ExtractPort(System.String)">
            <summary>
            Extracts the port number from an msmdsrv.exe process command line.
            </summary>
            <param name="commandLine">The full command line of the msmdsrv.exe process</param>
            <returns>The port number if found and valid; otherwise, 0</returns>
            <remarks>
            The port is specified with the -p parameter in the command line.
            Example format: -p 12345
            </remarks>
        </member>
        <member name="M:pbi_local_mcp.InstanceDiscovery.EnumerateDatabasesAsync(System.Int32)">
            <summary>
            Enumerates all databases available on a specified Analysis Services port using ADOMD.NET.
            </summary>
            <param name="port">The port number where the Analysis Services instance is listening</param>
            <returns>A list of DatabaseInfo objects containing database names and IDs</returns>
            <remarks>
            This method attempts to connect to localhost on the specified port and query
            the DBSCHEMA_CATALOGS schema rowset to discover available databases.
            Connection failures are logged but do not throw exceptions.
            </remarks>
        </member>
        <member name="M:pbi_local_mcp.InstanceDiscovery.DiscoverInstancesAsync">
            <summary>
            Creates a new instance discovery service and discovers running Power BI instances.
            </summary>
            <returns>A collection of InstanceInfo objects for all discovered Power BI instances</returns>
            <remarks>
            This is a helper method that creates a new InstanceDiscovery with a NullLogger
            for use in static contexts where dependency injection is not available.
            </remarks>
        </member>
        <member name="T:pbi_local_mcp.Resources.ServerConfigurator">
            <summary>
            Handles server configuration and startup for the Power BI Model Context Protocol
            </summary>
        </member>
        <member name="M:pbi_local_mcp.Resources.ServerConfigurator.#ctor(Microsoft.Extensions.Logging.ILogger{pbi_local_mcp.Resources.ServerConfigurator})">
            <summary>
            Initializes a new instance of the ServerConfigurator class
            </summary>
            <param name="logger">Logger instance</param>
        </member>
        <member name="M:pbi_local_mcp.Resources.ServerConfigurator.RunAsync(System.String[])">
            <summary>
            Configures and runs the MCP server
            </summary>
            <param name="args">Command line arguments</param>
            <returns>A task representing the asynchronous operation</returns>
        </member>
        <member name="M:pbi_local_mcp.Resources.ServerConfigurator.RunServerAsync(System.String[])">
            <summary>
            Static helper to run the server
            </summary>
        </member>
        <member name="M:pbi_local_mcp.Resources.ServerConfigurator.LoadEnvFile(System.String)">
            <summary>
            Loads environment variables from a file as fallback values (won't override existing values)
            </summary>
            <param name="path">Path to the environment file</param>
        </member>
        <member name="M:pbi_local_mcp.Resources.ServerConfigurator.ProcessCommandLineArgumentsAsync(System.String[])">
            <summary>
            Processes command-line arguments and sets environment variables accordingly
            </summary>
            <param name="args">Command line arguments</param>
            <returns>A task representing the asynchronous operation</returns>
        </member>
        <member name="M:pbi_local_mcp.Resources.ServerConfigurator.DiscoverDatabaseForPortAsync(System.Int32)">
            <summary>
            Discovers the first available database on the specified port
            </summary>
            <param name="port">The port to check for databases</param>
            <returns>The ID of the first database found, or null if none found</returns>
        </member>
        <member name="T:pbi_local_mcp.TabularConnection">
            <summary>
            Implements connection and query execution for PowerBI's tabular model
            </summary>
        </member>
        <member name="F:pbi_local_mcp.TabularConnection.DefaultCommandTimeout">
            <summary>
            Default command timeout in seconds
            </summary>
        </member>
        <member name="M:pbi_local_mcp.TabularConnection.#ctor(pbi_local_mcp.Configuration.PowerBiConfig,Microsoft.Extensions.Logging.ILogger{pbi_local_mcp.TabularConnection})">
            <summary>
            Initializes a new instance of the TabularConnection class with configuration settings
            </summary>
            <param name="config">Power BI configuration settings</param>
            <param name="logger">Logger instance for tracing.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when configuration is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when configuration values are missing or invalid</exception>
        </member>
        <member name="M:pbi_local_mcp.TabularConnection.#ctor(pbi_local_mcp.Configuration.PowerBiConfig)">
            <summary>
            Initializes a new instance of <see cref="T:pbi_local_mcp.TabularConnection"/> using the default null logger.
            </summary>
            <param name="config">Configuration settings for the Power BI connection.</param>
        </member>
        <member name="M:pbi_local_mcp.TabularConnection.#ctor(Microsoft.Extensions.Logging.ILogger{pbi_local_mcp.TabularConnection},System.String,System.String)">
            <summary>
            Initializes a new instance of the TabularConnection class with explicit connection parameters
            </summary>
            <param name="logger">Logger for diagnostic information</param>
            <param name="port">Port number for the Power BI instance</param>
            <param name="dbId">Database ID (catalog name) to connect to</param>
            <exception cref="T:System.ArgumentNullException">Thrown when required parameters are null</exception>
            <exception cref="T:System.ArgumentException">Thrown when required parameters are empty</exception>
        </member>
        <member name="M:pbi_local_mcp.TabularConnection.#ctor(Microsoft.Extensions.Logging.ILogger{pbi_local_mcp.TabularConnection},Microsoft.AnalysisServices.AdomdClient.AdomdConnection)">
            <summary>
            Initializes a new instance of the TabularConnection class with a pre-configured connection
            Used primarily for testing with mock connections
            </summary>
            <param name="logger">Logger for diagnostic information</param>
            <param name="connection">Pre-configured ADOMD connection</param>
            <exception cref="T:System.ArgumentNullException">Thrown when required parameters are null</exception>
        </member>
        <member name="M:pbi_local_mcp.TabularConnection.ExecAsync(System.String,pbi_local_mcp.QueryType)">
            <inheritdoc/>
        </member>
        <member name="M:pbi_local_mcp.TabularConnection.ExecAsync(System.String,pbi_local_mcp.QueryType,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:pbi_local_mcp.TabularConnection.ExecInfoAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:pbi_local_mcp.TabularConnection.ExecInfoAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:pbi_local_mcp.TabularConnection.EnsureConnectionOpenAsync">
            <summary>
            Ensures that the connection is open, opening it if necessary
            </summary>
            <returns>A task representing the asynchronous operation</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the connection cannot be opened</exception>
        </member>
        <member name="M:pbi_local_mcp.TabularConnection.EnsureConnectionOpenAsync(System.Threading.CancellationToken)">
            <summary>
            Ensures that the connection is open, opening it if necessary, with cancellation support
            </summary>
            <param name="cancellationToken">Token to monitor for cancellation requests</param>
            <returns>A task representing the asynchronous operation</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the connection cannot be opened</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is canceled</exception>
        </member>
        <member name="M:pbi_local_mcp.TabularConnection.Dispose">
            <summary>
            Disposes resources used by the connection
            </summary>
        </member>
        <member name="M:pbi_local_mcp.TabularConnection.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the connection and optionally releases the managed resources
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources</param>
        </member>
        <member name="M:pbi_local_mcp.TabularConnection.Finalize">
            <summary>
            Finalizer to ensure resource cleanup
            </summary>
        </member>
        <member name="M:pbi_local_mcp.TabularConnection.CreateEnhancedErrorMessage(System.Exception,System.String,pbi_local_mcp.QueryType)">
            <summary>
            Creates an enhanced error message that includes query details for better error reporting through MCP protocol
            </summary>
            <param name="originalException">The original exception that occurred</param>
            <param name="query">The query that caused the exception</param>
            <param name="queryType">The type of query (DAX or DMV)</param>
            <returns>Enhanced error message with query context</returns>
        </member>
        <member name="T:Program">
            <summary>
            Entry point for the Power BI Model Context Protocol application
            </summary>
        </member>
        <member name="M:Program.Main(System.String[])">
            <summary>
            Main entry point for the application
            </summary>
            <param name="args">Command line arguments</param>
        </member>
    </members>
</doc>
